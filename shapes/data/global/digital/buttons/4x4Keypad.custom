/**
 * Custom JS code to tweak the standard behaviour of the generated
 * shape. add your custom code and event handler here.
 *
 * Looks disconcerting - extending my own class. But this is a good method to
 * merge basic code and override them with custom methods.
 */
digital_buttons_4x4Keypad = digital_buttons_4x4Keypad.extend({

    init: function(attr, setter, getter){
        this._super(attr, setter, getter);

        // your special code here
        this.segment = null
        this.key = -1
        this.strobe = false
        this.mousedownCallback = function(emitter, {relX, relY}) {
            relX = parseInt(relX/20)
            relY = parseInt(relY/20)
            this.key = (relX+ relY*4)
            this.segment =  "rect_"+this.key.toString(16).toLowerCase()
            emitter.layerAttr(this.segment, {fill:"#C21B7A"});
        };
        
        this.mouseupCallback = function(emitter, {relX, relY}) {
            emitter.layerAttr(this.segment, {fill:"#FFFFFF"});
        };
    },

    /**
     *  Called by the simulator for every calculation
     *  loop
     *  @param {Object} context context where objects can store or handover global variables to other objects.
     *  @required
     **/
    calculate:function( context)
    {
        // first stage....set the output
        if (this.strobe && this.key >=0){
            this.getOutputPort("out_strobe").setValue(false)
            this.key = -1
        }
        else if (this.strobe){
            this.getOutputPort("out_a").setValue(false)
            this.getOutputPort("out_b").setValue(false)
            this.getOutputPort("out_c").setValue(false)
            this.getOutputPort("out_d").setValue(false)
            this.strobe = false
        }
        else if(this.key>=0){
            this.getOutputPort("out_a").setValue(this.key&1?true:false)
            this.getOutputPort("out_b").setValue(this.key&2?true:false)
            this.getOutputPort("out_c").setValue(this.key&4?true:false)
            this.getOutputPort("out_d").setValue(this.key&8?true:false)
            this.getOutputPort("out_strobe").setValue(true)
            this.strobe = true
        }

    },


    /**
     *  Called if the simulation mode is starting
     *  @required
     **/
    onStart:function( context )
    {
        this.on("mousedown", this.mousedownCallback, this)
        this.on("mouseup",   this.mouseupCallback, this)
    },

    /**
     *  Called if the simulation mode is stopping
     *  @required
     **/
    onStop:function( context )
    {
        this.off(this.mousedownCallback)
        this.off(this.mouseupCallback)
    },

    /**
     * Get the simulator a hint which kind of hardware the shapes requires or supports
     * This helps the simulator to bring up some dialogs and messages if any new hardware is connected/get lost
     * and your are running a circuit which needs this kind of hardware...
     **/
    getRequiredHardware: function(){
      return {
        arduino: false
      }
    }

});