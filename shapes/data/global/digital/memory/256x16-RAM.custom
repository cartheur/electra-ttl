/**
 * by 'Draw2D Shape Designer'
 *
 * Custom JS code to tweak the standard behaviour of the generated
 * shape. add your custome code and event handler here.
 *
 *
 */
digital_memory_256x16_RAM = digital_memory_256x16_RAM.extend({

    init: function(attr, setter, getter){
        this._super(attr, setter, getter);

        this.attr({resizeable:false});
        this.installEditPolicy(new draw2d.policy.figure.AntSelectionFeedbackPolicy());
        
        this.wordLength    = 16;
        this.addressLength = 8;
        this.lineCount = Math.pow(2, this.addressLength)
        
        this.ram = new Uint16Array(this.lineCount)

        // change the ram if the user change them in the config dialog
        //
        this.on("change:userData.ram",(emitter, event)=>{
            let a = event.value
            a = a.trim().replace(/[^0-1]/g, "")
            for(let i = 0; i< a.length; i+=this.wordLength) {
                this.ram[i/this.wordLength] = parseInt(a.substring(i,i+this.wordLength),2)
            }
        });
        this.on("added", ()=>{
            let serializedRAM = this.attr("userData.ram")
            if(!serializedRAM){
                serializedRAM = new Array(this.lineCount+1).join("".padStart(this.wordLength, "0")+"\n")
                this.attr("userData.ram", serializedRAM)
            }
            serializedRAM = serializedRAM.trim().replace(/[^0-1]/g, "").substring(0, this.wordLength*this.lineCount)
            for(let i = 0; i< serializedRAM.length; i+=this.wordLength) {
                this.ram[i/this.wordLength] = parseInt(serializedRAM.substring(i,i+this.wordLength),2)
            }
        })
    },

    onStop: function(){
        let a = []
        this.ram.forEach( (val) => {
            // 17   => 1001
            //  9.  => 0101
            // ....
            a.push(val.toString(2).padStart(this.wordLength, "0").substring(0,this.wordLength))
        })
        this.attr("userData.ram", a.join("\n"))
    },
    
    /**
     *  Called by the simulator for every calculation
     *  loop
     *  @required
     **/
    calculate:function()
    {
        let rw = this.getInputPort("input_rw").getBooleanValue();
        let addr = 0;
        
        for(let i = 0; i<this.wordLength; i++){
            addr += this.getInputPort("input_a"+(i+1)).getBooleanValue()?(1<<i):0;
        }

        if(rw){
            let data = 0;
            for(let i = 0; i<this.wordLength; i++){
                data += this.getInputPort("input_d"+(i+1)).getBooleanValue()?(1<<i):0;
            }
            this.ram[addr] = data
        } else {
            let data = this.ram[addr]
            for(let i = 0; i<this.wordLength; i++){
                this.getOutputPort("input_q"+(i+1)).setValue(data&(1<<i)?true:false);
            }
        }
    },
    
    getParameterSettings: function()
    {
        return [
        {
            name:"ram",
            label:`${this.addressLength}x${this.wordLength} Bit RAM`,
            property:{
                type: "longtext"
            }
        }];
    }
});