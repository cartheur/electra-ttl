/**
 * by 'Draw2D Shape Designer'
 *
 * Custom JS code to tweak the standard behaviour of the generated
 * shape. add your custome code and event handler here.
 *
 *
 */
digital_memory_16x4_RAM = digital_memory_16x4_RAM.extend({

    init: function(attr, setter, getter){
        this._super(attr, setter, getter);

        this.attr({resizeable:false});
        this.installEditPolicy(new draw2d.policy.figure.AntSelectionFeedbackPolicy());
        
        this.ram = new Uint8Array(16)
    },

    /**
     *  Called by the simulator for every calculation
     *  loop
     *  @required
     **/
    calculate:function()
    {
        var input = [];
        var output = [];
        
        let addr =   this.getInputPort("input_a1").getBooleanValue();
        addr    += 2*this.getInputPort("input_a2").getBooleanValue();
        addr    += 4*this.getInputPort("input_a3").getBooleanValue();
        addr    += 8*this.getInputPort("input_a4").getBooleanValue();

        input.push(this.getInputPort("input_d1").getBooleanValue());
        input.push(this.getInputPort("input_d2").getBooleanValue());
        input.push(this.getInputPort("input_d3").getBooleanValue());
        input.push(this.getInputPort("input_d4").getBooleanValue());
 
         input.push(this.getInputPort("input_c").getBooleanValue());
 
        this.getOutputPort("output_s1").setValue(output[0]);
        this.getOutputPort("output_s2").setValue(output[1]);
        this.getOutputPort("output_s3").setValue(output[2]);
        this.getOutputPort("output_s4").setValue(output[3]);
        this.getOutputPort("output_c").setValue(output[4]);
    },


    /**
     *  Called if the simulation mode is starting
     *  @required
     **/
    onStart:function()
    {
    },

    /**
     *  Called if the simulation mode is stopping
     *  @required
     **/
    onStop:function()
    {
    }
});