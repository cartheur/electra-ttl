/**
 * by 'Draw2D Shape Designer'
 *
 * Custom JS code to tweak the standard behaviour of the generated
 * shape. add your custome code and event handler here.
 *
 *
 */
digital_counter_4_Bit_Binary = digital_counter_4_Bit_Binary.extend({

    init: function(attr, setter, getter){
        this._super(attr, setter, getter);
        this.attr({resizeable:false});
        this.installEditPolicy(new draw2d.policy.figure.AntSelectionFeedbackPolicy());

         // your special code here
         this.last_clk=false;
         this.counter=0;
    },

    /**
     *  Called by the simulator for every calculation
     *  loop
     *  @required
     **/
    calculate:function()
    {
        var clk    = this.getInputPort("input_clk").getBooleanValue();
        var load   = this.getInputPort("input_load").getBooleanValue();
        var enable = this.getInputPort("input_enable").getBooleanValue();
        
        var rising = this.last_clk===false && clk===true;
        if(enable) {
            if(rising && load) {
               let addr =   this.getInputPort("input_a1").getBooleanValue();
                addr    += 2*this.getInputPort("input_a2").getBooleanValue();
                addr    += 4*this.getInputPort("input_a3").getBooleanValue();
                addr    += 8*this.getInputPort("input_a4").getBooleanValue();

            }
            
            if(rising===true){
                var q1 = this.getOutputPort("output_q1");
                var q2 = this.getOutputPort("output_q2");
                var q3 = this.getOutputPort("output_q3");
                var q4 = this.getOutputPort("output_q4");
                a.setValue(!!(this.counter & 1));
                b.setValue(!!(this.counter & 2));
                c.setValue(!!(this.counter & 4));
                d.setValue(!!(this.counter & 8));
                this.counter= (this.counter+1)%10;
            }
        }
        this.last_clk = clk;
    }
});