/**
 * by 'Draw2D Shape Designer'
 *
 * Custom JS code to tweak the standard behaviour of the generated
 * shape. add your custome code and event handler here.
 *
 *
 */
digital_counter_8_Bit_Binary = digital_counter_8_Bit_Binary.extend({

    init: function(attr, setter, getter){
        this._super(attr, setter, getter);
        this.attr({resizeable:false});
        this.installEditPolicy(new draw2d.policy.figure.AntSelectionFeedbackPolicy());

         // your special code here
         this.last_clk=false;
         this.counter=0;
    },

    /**
     *  Called by the simulator for every calculation
     *  loop
     *  @required
     **/
    calculate:function()
    {
        var clk    = this.getInputPort("input_clk").getBooleanValue();
        var load   = this.getInputPort("input_load").getBooleanValue();
        var enable = this.getInputPort("input_enable").getBooleanValue();
        var reset  = this.getInputPort("input_reset").getBooleanValue();
        
        var rising = this.last_clk===false && clk===true;
        
        if(reset ){
            this.counter= 0;
            this.getOutputPort("output_q1").setValue(false);
            this.getOutputPort("output_q2").setValue(false);
            this.getOutputPort("output_q3").setValue(false);
            this.getOutputPort("output_q4").setValue(false);
            this.getOutputPort("output_q5").setValue(false);
            this.getOutputPort("output_q6").setValue(false);
            this.getOutputPort("output_q7").setValue(false);
            this.getOutputPort("output_q8").setValue(false);
        }

        // Load the new data from the input if we have a RISING clock and ENABLE is set
        //
        else if(rising && load) {
           this.counter  = this.getInputPort("input_d1").getBooleanValue()?1:0;
           this.counter += this.getInputPort("input_d2").getBooleanValue()?2:0;
           this.counter += this.getInputPort("input_d3").getBooleanValue()?4:0;
           this.counter += this.getInputPort("input_d4").getBooleanValue()?8:0;
           this.counter += this.getInputPort("input_d5").getBooleanValue()?16:0;
           this.counter += this.getInputPort("input_d6").getBooleanValue()?32:0;
           this.counter += this.getInputPort("input_d7").getBooleanValue()?64:0;
           this.counter += this.getInputPort("input_d8").getBooleanValue()?128:0;
           
           this.getOutputPort("output_q1").setValue(this.counter&1?true:false);
           this.getOutputPort("output_q2").setValue(this.counter&2?true:false);
           this.getOutputPort("output_q3").setValue(this.counter&4?true:false);
           this.getOutputPort("output_q4").setValue(this.counter&8?true:false);
           this.getOutputPort("output_q5").setValue(this.counter&16?true:false);
           this.getOutputPort("output_q6").setValue(this.counter&32?true:false);
           this.getOutputPort("output_q7").setValue(this.counter&64?true:false);
           this.getOutputPort("output_q8").setValue(this.counter&128?true:false);
        }
        
        else if(enable && rising && clk ){
            this.counter= (this.counter+1)%16;
            this.getOutputPort("output_q1").setValue(this.counter&1?true:false);
            this.getOutputPort("output_q2").setValue(this.counter&2?true:false);
            this.getOutputPort("output_q3").setValue(this.counter&4?true:false);
            this.getOutputPort("output_q4").setValue(this.counter&8?true:false);
            this.getOutputPort("output_q5").setValue(this.counter&16?true:false);
            this.getOutputPort("output_q6").setValue(this.counter&32?true:false);
            this.getOutputPort("output_q7").setValue(this.counter&64?true:false);
            this.getOutputPort("output_q8").setValue(this.counter&128?true:false);
        }
        this.last_clk = clk;
    }
});